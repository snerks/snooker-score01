{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["App","useState","redsRemaining","setRedsRemaining","pointsRemaining","setPointsRemaining","pointsRemainingForOtherPlayer","setPointsRemainingForOtherPlayer","playerPoints","setPlayerPoints","playerNumber","setPlayerNumber","isFinalRedColourGone","setIsFinalRedColourGone","isRedOn","setIsRedOn","isYellowOn","setIsYellowOn","isGreenOn","setIsGreenOn","isBrownOn","setIsBrownOn","isBlueOn","setIsBlueOn","isPinkOn","setIsPinkOn","isBlackOn","setIsBlackOn","isGameOver","setIsGameOver","potRed","potBall","foul","value","className","onClick","style","backgroundColor","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9d1c028e.chunk.js","sourcesContent":["import React, { useState } from 'react';\n// import logo from './logo.svg';\nimport './App.css';\n\n// interface IPlayerPointsState {\n//   0: number;\n//   1: number;\n// }\n\nconst App = () => {\n  const [redsRemaining, setRedsRemaining] = useState(15);\n\n  const [pointsRemaining, setPointsRemaining] = useState(147);\n  const [pointsRemainingForOtherPlayer, setPointsRemainingForOtherPlayer] = useState(147);\n\n  const [playerPoints, setPlayerPoints] = useState([0, 0]);\n  const [playerNumber, setPlayerNumber] = useState(0);\n\n  const [isFinalRedColourGone, setIsFinalRedColourGone] = useState(false);\n\n  const [isRedOn, setIsRedOn] = useState(true);\n  const [isYellowOn, setIsYellowOn] = useState(true);\n  const [isGreenOn, setIsGreenOn] = useState(true);\n  const [isBrownOn, setIsBrownOn] = useState(true);\n  const [isBlueOn, setIsBlueOn] = useState(true);\n  const [isPinkOn, setIsPinkOn] = useState(true);\n  const [isBlackOn, setIsBlackOn] = useState(true);\n\n  const [isGameOver, setIsGameOver] = useState(false);\n\n  const potNothing = () => {\n    setPlayerNumber((playerNumber + 1) % 2);\n    setIsRedOn(redsRemaining > 0);\n    setPointsRemaining((redsRemaining * 8) + 27);\n\n    if (redsRemaining === 0) {\n      setIsFinalRedColourGone(true);\n      setIsYellowOn(true);\n      setIsGreenOn(false);\n      setIsBrownOn(false);\n      setIsBlueOn(false);\n      setIsPinkOn(false);\n      setIsBlackOn(false);\n    }\n  }\n\n  const potRed = () => {\n    potBall(1);\n    setRedsRemaining(redsRemaining - 1);\n\n    setPointsRemainingForOtherPlayer(pointsRemainingForOtherPlayer - 8);\n  }\n\n  const potYellow = () => {\n    potBall(2);\n  }\n\n  const potGreen = () => {\n    potBall(3);\n  }\n\n  const potBrown = () => {\n    potBall(4);\n  }\n\n  const potBlue = () => {\n    potBall(5);\n  }\n\n  const potPink = () => {\n    potBall(6);\n  }\n\n  const potBlack = () => {\n    potBall(7);\n\n    if (isFinalRedColourGone) {\n      setIsGameOver(true);\n    }\n  }\n\n  // public get areSnookersRequired() {\n  //   return pointsRemainingForOtherPlayer < playerPoints[playerNumber];\n  // }\n\n  const areSnookersRequired = () => {\n    return (playerPoints[1 - playerNumber] + pointsRemainingForOtherPlayer) < playerPoints[playerNumber];\n  }\n\n  const foul = (value: number) => {\n    if (playerNumber === 0) {\n      setPlayerPoints([playerPoints[0], playerPoints[1] + value]);\n    } else {\n      setPlayerPoints([playerPoints[0] + value, playerPoints[1]]);\n    }\n\n    setPlayerNumber((playerNumber + 1) % 2);\n    setIsRedOn(redsRemaining > 0);\n  }\n\n  const potBall = (value: number) => {\n    setPointsRemaining(pointsRemaining - value);\n\n    if (playerNumber === 0) {\n      setPlayerPoints([playerPoints[0] + value, playerPoints[1]]);\n    } else {\n      setPlayerPoints([playerPoints[0], playerPoints[1] + value]);\n    }\n\n    setIsRedOn(redsRemaining > 0 && value > 1);\n\n    if (redsRemaining === 0 && value > 1) {\n      setIsFinalRedColourGone(true);\n      setIsYellowOn(true);\n      setIsGreenOn(false);\n      setIsBrownOn(false);\n      setIsBlueOn(false);\n      setIsPinkOn(false);\n      setIsBlackOn(false);\n    }\n\n    if (isFinalRedColourGone) {\n      setPointsRemainingForOtherPlayer(pointsRemainingForOtherPlayer - value);\n\n      switch (value) {\n        case 2:\n          setIsYellowOn(false);\n          setIsGreenOn(true);\n          setIsBrownOn(false);\n          setIsBlueOn(false);\n          setIsPinkOn(false);\n          setIsBlackOn(false);\n          break;\n        case 3:\n          setIsYellowOn(false);\n          setIsGreenOn(false);\n          setIsBrownOn(true);\n          setIsBlueOn(false);\n          setIsPinkOn(false);\n          setIsBlackOn(false);\n          break;\n        case 4:\n          setIsYellowOn(false);\n          setIsGreenOn(false);\n          setIsBrownOn(false);\n          setIsBlueOn(true);\n          setIsPinkOn(false);\n          setIsBlackOn(false);\n          break;\n        case 5:\n          setIsYellowOn(false);\n          setIsGreenOn(false);\n          setIsBrownOn(false);\n          setIsBlueOn(false);\n          setIsPinkOn(true);\n          setIsBlackOn(false);\n          break;\n        case 6:\n          setIsYellowOn(false);\n          setIsGreenOn(false);\n          setIsBrownOn(false);\n          setIsBlueOn(false);\n          setIsPinkOn(false);\n          setIsBlackOn(true);\n          break;\n        case 7:\n          setIsYellowOn(false);\n          setIsGreenOn(false);\n          setIsBrownOn(false);\n          setIsBlueOn(false);\n          setIsPinkOn(false);\n          setIsBlackOn(false);\n          break;\n        default:\n          break;\n      }\n    }\n  }\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        {/* <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.tsx</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a> */}\n        {!isGameOver &&\n          <div>\n            Remaining Reds: {redsRemaining}\n            <div>\n              Pot\n          </div>\n            <div>\n              {/* <span className=\"ball\">Pot</span> */}\n              {isRedOn &&\n                <div>\n                  <span className=\"ball red\" onClick={() => potRed()}>{redsRemaining}</span>\n                  <span className=\"ball red\" onClick={() => potRed()}>{redsRemaining}</span>\n                  <span className=\"ball red\" onClick={() => potRed()}>{redsRemaining}</span>\n                  <span className=\"ball red\" onClick={() => potRed()}>{redsRemaining}</span>\n                  <span className=\"ball red\" onClick={() => potRed()}>{redsRemaining}</span>\n                  <span className=\"ball red\" onClick={() => potRed()}>{redsRemaining}</span>\n                </div>\n              }\n              {!isRedOn &&\n                <div>\n                  {isYellowOn && <span className=\"ball yellow\" onClick={() => potYellow()}></span>}\n                  {isGreenOn && <span className=\"ball green\" onClick={() => potGreen()}></span>}\n                  {isBrownOn && <span className=\"ball brown\" onClick={() => potBrown()}></span>}\n                  {isBlueOn && <span className=\"ball blue\" onClick={() => potBlue()}></span>}\n                  {isPinkOn && <span className=\"ball pink\" onClick={() => potPink()}></span>}\n                  {isBlackOn && <span className=\"ball black\" onClick={() => potBlack()}></span>}\n                </div>\n              }\n            </div>\n            <div>\n              No Pot\n          </div>\n            <div>\n              <span className=\"ball white\" onClick={() => potNothing()}></span>\n            </div>\n            <div>\n              Foul\n          </div>\n            <div>\n              <span className=\"ball red\" onClick={() => foul(4)}>X</span>\n              <span className=\"ball yellow\" onClick={() => foul(4)}>X</span>\n              <span className=\"ball green\" onClick={() => foul(4)}>X</span>\n              <span className=\"ball brown\" onClick={() => foul(4)}>X</span>\n              <span className=\"ball blue\" onClick={() => foul(5)}>X</span>\n              <span className=\"ball pink\" onClick={() => foul(6)}>X</span>\n              <span className=\"ball black\" onClick={() => foul(7)}>X</span>\n            </div>\n          </div>\n        }\n\n        {isGameOver && <div>Game Over!</div>}\n        <div>\n          <div>\n            Current Player: <span>{playerNumber + 1}</span>\n\n            {/* <div>\n              PointsRemainingForOtherPlayer: {pointsRemainingForOtherPlayer}\n            </div>\n            <div>\n              PlayerPoints[{playerNumber}]: {playerPoints[playerNumber]}\n            </div> */}\n            {areSnookersRequired() && <div style={{ backgroundColor: \"orange\" }}>Player {(playerNumber + 1) % 2 === 0 ? 1 : 2} : Snookers Required!!!!</div>}\n          </div>\n          <div>\n            Points Remaining: <span>{pointsRemaining}</span>\n          </div>\n          <div>\n            Points Remaining For Player {(playerNumber + 1) % 2 === 0 ? 1 : 2}: <span>{pointsRemainingForOtherPlayer}</span>\n          </div>\n          <div>\n            Player 1: <span>{playerPoints[0]}</span>\n          </div>\n          <div>\n            Player 2: <span>{playerPoints[1]}</span>\n          </div>\n        </div>\n\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import 'core-js';\nimport \"react-app-polyfill/ie11\";\nimport \"react-app-polyfill/stable\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}
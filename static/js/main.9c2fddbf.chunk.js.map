{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["App","useState","redsRemaining","setRedsRemaining","pointsRemaining","setPointsRemaining","pointsRemainingForOtherPlayer","setPointsRemainingForOtherPlayer","playerPoints","setPlayerPoints","playerNumber","setPlayerNumber","isFinalRedColourGone","setIsFinalRedColourGone","isRedOn","setIsRedOn","isYellowOn","setIsYellowOn","isGreenOn","setIsGreenOn","isBrownOn","setIsBrownOn","isBlueOn","setIsBlueOn","isPinkOn","setIsPinkOn","isBlackOn","setIsBlackOn","isGameOver","setIsGameOver","wasGameConceded","setWasGameConceded","wasLastShotAFoul","setWasLastShotAFoul","getOtherPlayerIndex","potRed","potBall","getSnookersRequiredTarget","currentPlayerScore","otherPlayerScore","isSnookersRequiredTargetPossible","targetValue","redCount","blackCount","isBlackRequired","isBlueRequired","isBrownRequired","isGreenRequired","isPinkRequired","isYellowRequired","runningTotal","remainingRedsCount","remainingPointsForOtherPlayer","currentPlayerRunningTotal","index","foul","value","noFoul","className","onClick","style","border","width","color","marginTop","backgroundColor","paddingTop","paddingBottom","onClickCapture","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9c2fddbf.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport './App.css';\r\n\r\n\r\nconst App = () => {\r\n  const [redsRemaining, setRedsRemaining] = useState(15);\r\n\r\n  const [pointsRemaining, setPointsRemaining] = useState(147);\r\n  const [pointsRemainingForOtherPlayer, setPointsRemainingForOtherPlayer] = useState(147);\r\n\r\n  const [playerPoints, setPlayerPoints] = useState([0, 0]);\r\n  const [playerNumber, setPlayerNumber] = useState(0);\r\n\r\n  const [isFinalRedColourGone, setIsFinalRedColourGone] = useState(false);\r\n\r\n  const [isRedOn, setIsRedOn] = useState(true);\r\n  const [isYellowOn, setIsYellowOn] = useState(true);\r\n  const [isGreenOn, setIsGreenOn] = useState(true);\r\n  const [isBrownOn, setIsBrownOn] = useState(true);\r\n  const [isBlueOn, setIsBlueOn] = useState(true);\r\n  const [isPinkOn, setIsPinkOn] = useState(true);\r\n  const [isBlackOn, setIsBlackOn] = useState(true);\r\n\r\n  const [isGameOver, setIsGameOver] = useState(false);\r\n  const [wasGameConceded, setWasGameConceded] = useState(false);\r\n\r\n  const [wasLastShotAFoul, setWasLastShotAFoul] = useState(false);\r\n\r\n  const getWinningPlayer = () => {\r\n    return playerPoints[0] > playerPoints[1] ? \"1\" : \"2\";\r\n  }\r\n\r\n  const newGame = () => {\r\n    setRedsRemaining(15);\r\n    setPointsRemaining(147);\r\n    setPointsRemainingForOtherPlayer(147);\r\n\r\n    setPlayerPoints([0, 0]);\r\n    setPlayerNumber(0);\r\n\r\n    setIsFinalRedColourGone(false);\r\n\r\n    setIsRedOn(true);\r\n\r\n    setIsYellowOn(true);\r\n    setIsGreenOn(true);\r\n    setIsBrownOn(true);\r\n    setIsBlueOn(true);\r\n    setIsPinkOn(true);\r\n    setIsBlackOn(true);\r\n\r\n    setWasLastShotAFoul(false);\r\n\r\n    setIsGameOver(false);\r\n  }\r\n\r\n  const getOtherPlayerIndex = () => {\r\n    return (playerNumber + 1) % 2;\r\n  }\r\n\r\n  const getOtherPlayerNumber = () => {\r\n    return getOtherPlayerIndex() + 1;\r\n  }\r\n\r\n  const setOtherPlayerIndex = () => {\r\n    setPlayerNumber(getOtherPlayerIndex());\r\n  }\r\n\r\n  const playAgain = () => {\r\n    setOtherPlayerIndex();\r\n    noFoul();\r\n  }\r\n\r\n  const concede = () => {\r\n    setIsGameOver(true);\r\n    setWasGameConceded(true);\r\n  }\r\n\r\n  const potNothing = () => {\r\n    noFoul();\r\n    setPlayerNumber((playerNumber + 1) % 2);\r\n    setIsRedOn(redsRemaining > 0);\r\n    setPointsRemaining((redsRemaining * 8) + 27);\r\n\r\n    if (redsRemaining === 0) {\r\n      setIsFinalRedColourGone(true);\r\n      setIsYellowOn(true);\r\n      setIsGreenOn(false);\r\n      setIsBrownOn(false);\r\n      setIsBlueOn(false);\r\n      setIsPinkOn(false);\r\n      setIsBlackOn(false);\r\n    }\r\n  }\r\n\r\n  const potRed = () => {\r\n    potBall(1);\r\n    setRedsRemaining(redsRemaining - 1);\r\n\r\n    setPointsRemainingForOtherPlayer(pointsRemainingForOtherPlayer - 8);\r\n  }\r\n\r\n  const potYellow = () => {\r\n    potBall(2);\r\n  }\r\n\r\n  const potGreen = () => {\r\n    potBall(3);\r\n  }\r\n\r\n  const potBrown = () => {\r\n    potBall(4);\r\n  }\r\n\r\n  const potBlue = () => {\r\n    potBall(5);\r\n  }\r\n\r\n  const potPink = () => {\r\n    potBall(6);\r\n  }\r\n\r\n  const potBlack = () => {\r\n    potBall(7);\r\n\r\n    if (isFinalRedColourGone) {\r\n      setIsGameOver(true);\r\n    }\r\n  }\r\n\r\n  interface SnookersRequiredInfo {\r\n    isSnookersRequiredTargetPossible: boolean;\r\n\r\n    targetValue: number;\r\n    redCount: number;\r\n    blackCount: number;\r\n\r\n    isYellowRequired: boolean;\r\n    isGreenRequired: boolean;\r\n    isBrownRequired: boolean;\r\n    isBlueRequired: boolean;\r\n    isPinkRequired: boolean;\r\n    isBlackRequired: boolean;\r\n  }\r\n\r\n  const getSnookersRequiredTarget = (): SnookersRequiredInfo => {\r\n    const currentPlayerScore = playerPoints[playerNumber];\r\n    const otherPlayerScore = playerPoints[1 - playerNumber];\r\n\r\n    if (currentPlayerScore + pointsRemaining < otherPlayerScore) {\r\n      return {\r\n        isSnookersRequiredTargetPossible: false,\r\n\r\n        targetValue: otherPlayerScore + 1,\r\n        redCount: redsRemaining,\r\n        blackCount: redsRemaining,\r\n\r\n        isBlackRequired: true,\r\n        isBlueRequired: true,\r\n        isBrownRequired: true,\r\n        isGreenRequired: true,\r\n        isPinkRequired: true,\r\n        isYellowRequired: true\r\n      };\r\n    }\r\n\r\n    if (currentPlayerScore > pointsRemainingForOtherPlayer + otherPlayerScore) {\r\n      return {\r\n        isSnookersRequiredTargetPossible: true,\r\n\r\n        targetValue: pointsRemainingForOtherPlayer + otherPlayerScore + 1,\r\n        redCount: 0,\r\n        blackCount: 0,\r\n\r\n        isBlackRequired: false,\r\n        isBlueRequired: false,\r\n        isBrownRequired: false,\r\n        isGreenRequired: false,\r\n        isPinkRequired: false,\r\n        isYellowRequired: false\r\n      };\r\n    }\r\n\r\n    let runningTotal = 0;\r\n\r\n    const remainingRedsCount = redsRemaining;\r\n\r\n    let remainingPointsForOtherPlayer = pointsRemainingForOtherPlayer;\r\n\r\n    let currentPlayerRunningTotal = currentPlayerScore;\r\n\r\n    for (let index = 0; index < remainingRedsCount; index++) {\r\n      remainingPointsForOtherPlayer -= 8;\r\n\r\n      runningTotal++;\r\n\r\n      currentPlayerRunningTotal = currentPlayerScore + runningTotal;\r\n\r\n      if (currentPlayerRunningTotal > remainingPointsForOtherPlayer + otherPlayerScore) {\r\n        return {\r\n          isSnookersRequiredTargetPossible: true,\r\n\r\n          targetValue: currentPlayerRunningTotal,\r\n          redCount: index + 1,\r\n          blackCount: index,\r\n\r\n          isBlackRequired: false,\r\n          isBlueRequired: false,\r\n          isBrownRequired: false,\r\n          isGreenRequired: false,\r\n          isPinkRequired: false,\r\n          isYellowRequired: false\r\n        };\r\n      }\r\n\r\n      runningTotal += 7;\r\n\r\n      currentPlayerRunningTotal = currentPlayerScore + runningTotal;\r\n\r\n      if (currentPlayerRunningTotal > remainingPointsForOtherPlayer + otherPlayerScore) {\r\n        return {\r\n          isSnookersRequiredTargetPossible: true,\r\n\r\n          targetValue: currentPlayerRunningTotal,\r\n          redCount: index + 1,\r\n          blackCount: index + 1,\r\n\r\n          isBlackRequired: false,\r\n          isBlueRequired: false,\r\n          isBrownRequired: false,\r\n          isGreenRequired: false,\r\n          isPinkRequired: false,\r\n          isYellowRequired: false\r\n        };\r\n      }\r\n    }\r\n\r\n    for (let index = 2; index < 8; index++) {\r\n      remainingPointsForOtherPlayer -= index;\r\n\r\n      runningTotal += index;\r\n\r\n      currentPlayerRunningTotal = currentPlayerScore + runningTotal;\r\n\r\n      if (currentPlayerRunningTotal > remainingPointsForOtherPlayer + otherPlayerScore) {\r\n        return {\r\n          isSnookersRequiredTargetPossible: true,\r\n\r\n          targetValue: currentPlayerRunningTotal,\r\n          redCount: remainingRedsCount,\r\n          blackCount: remainingRedsCount,\r\n\r\n          isYellowRequired: index >= 2,\r\n          isGreenRequired: index >= 3,\r\n          isBrownRequired: index >= 4,\r\n          isBlueRequired: index >= 5,\r\n          isPinkRequired: index >= 6,\r\n          isBlackRequired: index >= 7,\r\n        };\r\n      }\r\n    }\r\n\r\n    return {\r\n      isSnookersRequiredTargetPossible: false,\r\n\r\n      targetValue: remainingPointsForOtherPlayer + otherPlayerScore,\r\n      redCount: remainingRedsCount,\r\n      blackCount: remainingRedsCount,\r\n\r\n      isYellowRequired: true,\r\n      isGreenRequired: true,\r\n      isBrownRequired: true,\r\n      isBlueRequired: true,\r\n      isPinkRequired: true,\r\n      isBlackRequired: true,\r\n    };\r\n  }\r\n\r\n  const areSnookersRequiredForOtherPlayer = () => {\r\n    return (playerPoints[1 - playerNumber] + pointsRemainingForOtherPlayer) < playerPoints[playerNumber];\r\n  }\r\n\r\n  const areSnookersRequiredForCurrentPlayer = () => {\r\n    return (playerPoints[playerNumber] + pointsRemaining) < playerPoints[1 - playerNumber];\r\n  }\r\n\r\n  const foul = (value: number) => {\r\n    if (playerNumber === 0) {\r\n      setPlayerPoints([playerPoints[0], playerPoints[1] + value]);\r\n    } else {\r\n      setPlayerPoints([playerPoints[0] + value, playerPoints[1]]);\r\n    }\r\n\r\n    setPlayerNumber((playerNumber + 1) % 2);\r\n    setIsRedOn(redsRemaining > 0);\r\n\r\n    setWasLastShotAFoul(true);\r\n  }\r\n\r\n  const noFoul = () => {\r\n    setWasLastShotAFoul(false);\r\n  }\r\n\r\n  const potBall = (value: number) => {\r\n    noFoul();\r\n\r\n    if (isFinalRedColourGone) {\r\n      setPointsRemaining(pointsRemaining - value);\r\n    } else {\r\n      setPointsRemaining(pointsRemaining - (value === 1 ? 1 : 7));\r\n    }\r\n\r\n    if (playerNumber === 0) {\r\n      setPlayerPoints([playerPoints[0] + value, playerPoints[1]]);\r\n    } else {\r\n      setPlayerPoints([playerPoints[0], playerPoints[1] + value]);\r\n    }\r\n\r\n    setIsRedOn(redsRemaining > 0 && value > 1);\r\n\r\n    if (redsRemaining === 0 && value > 1) {\r\n      setIsFinalRedColourGone(true);\r\n      setIsYellowOn(true);\r\n      setIsGreenOn(false);\r\n      setIsBrownOn(false);\r\n      setIsBlueOn(false);\r\n      setIsPinkOn(false);\r\n      setIsBlackOn(false);\r\n    }\r\n\r\n    if (isFinalRedColourGone) {\r\n      setPointsRemainingForOtherPlayer(pointsRemainingForOtherPlayer - value);\r\n\r\n      switch (value) {\r\n        case 2:\r\n          setIsYellowOn(false);\r\n          setIsGreenOn(true);\r\n          setIsBrownOn(false);\r\n          setIsBlueOn(false);\r\n          setIsPinkOn(false);\r\n          setIsBlackOn(false);\r\n          break;\r\n        case 3:\r\n          setIsYellowOn(false);\r\n          setIsGreenOn(false);\r\n          setIsBrownOn(true);\r\n          setIsBlueOn(false);\r\n          setIsPinkOn(false);\r\n          setIsBlackOn(false);\r\n          break;\r\n        case 4:\r\n          setIsYellowOn(false);\r\n          setIsGreenOn(false);\r\n          setIsBrownOn(false);\r\n          setIsBlueOn(true);\r\n          setIsPinkOn(false);\r\n          setIsBlackOn(false);\r\n          break;\r\n        case 5:\r\n          setIsYellowOn(false);\r\n          setIsGreenOn(false);\r\n          setIsBrownOn(false);\r\n          setIsBlueOn(false);\r\n          setIsPinkOn(true);\r\n          setIsBlackOn(false);\r\n          break;\r\n        case 6:\r\n          setIsYellowOn(false);\r\n          setIsGreenOn(false);\r\n          setIsBrownOn(false);\r\n          setIsBlueOn(false);\r\n          setIsPinkOn(false);\r\n          setIsBlackOn(true);\r\n          break;\r\n        case 7:\r\n          setIsYellowOn(false);\r\n          setIsGreenOn(false);\r\n          setIsBrownOn(false);\r\n          setIsBlueOn(false);\r\n          setIsPinkOn(false);\r\n          setIsBlackOn(false);\r\n          break;\r\n        default:\r\n          break;\r\n      }\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n        {!isGameOver &&\r\n          <div>\r\n            {/* Remaining Reds: {redsRemaining} */}\r\n            <div>\r\n              Pot {isRedOn ? \"Red\" : \"Colour\"} {isRedOn && redsRemaining > 0 ? \"(\" + redsRemaining + \" remaining)\" : null}\r\n            </div>\r\n            <div>\r\n              {isRedOn &&\r\n                <div>\r\n                  <span className=\"ball red\" onClick={() => potRed()}></span>\r\n                  <span className=\"ball red\" onClick={() => potRed()}></span>\r\n                  <span className=\"ball red\" onClick={() => potRed()}></span>\r\n                  <span className=\"ball red\" onClick={() => potRed()}></span>\r\n                  <span className=\"ball red\" onClick={() => potRed()}></span>\r\n                  <span className=\"ball red\" onClick={() => potRed()}></span>\r\n                </div>\r\n              }\r\n              {!isRedOn &&\r\n                <div>\r\n                  {isYellowOn && <span className=\"ball yellow\" onClick={() => potYellow()}></span>}\r\n                  {isGreenOn && <span className=\"ball green\" onClick={() => potGreen()}></span>}\r\n                  {isBrownOn && <span className=\"ball brown\" onClick={() => potBrown()}></span>}\r\n                  {isBlueOn && <span className=\"ball blue\" onClick={() => potBlue()}></span>}\r\n                  {isPinkOn && <span className=\"ball pink\" onClick={() => potPink()}></span>}\r\n                  {isBlackOn && <span className=\"ball black\" onClick={() => potBlack()}></span>}\r\n                </div>\r\n              }\r\n            </div>\r\n            <div>\r\n              No Pot\r\n          </div>\r\n            <div>\r\n              <span className=\"ball white\" onClick={() => potNothing()}></span>\r\n            </div>\r\n            <div>\r\n              Foul\r\n          </div>\r\n            <div>\r\n              <span className=\"ball red\" onClick={() => foul(4)}>4</span>\r\n              {/* <span className=\"ball yellow\" onClick={() => foul(4)}>X</span>\r\n              <span className=\"ball green\" onClick={() => foul(4)}>X</span>\r\n              <span className=\"ball brown\" onClick={() => foul(4)}>X</span> */}\r\n              <span className=\"ball blue\" onClick={() => foul(5)}>5</span>\r\n              <span className=\"ball pink\" onClick={() => foul(6)}>6</span>\r\n              <span className=\"ball black\" onClick={() => foul(7)}>7</span>\r\n            </div>\r\n          </div>\r\n        }\r\n\r\n        {isGameOver &&\r\n          <div>Frame Over!\r\n            {wasGameConceded && \" Frame conceded by Player \" + (playerNumber + 1)}\r\n            {!wasGameConceded && \" Frame won by Player \" + getWinningPlayer()}\r\n          </div>}\r\n        <div>\r\n          <div className=\"scores\">\r\n            <table style={{ border: \"1\" }}>\r\n              <thead>\r\n\r\n              </thead>\r\n              <tbody>\r\n                <tr>\r\n                  <td className=\"player player1\">Player 1</td>\r\n                  <td style={{ width: 50, color: \"yellow\" }}>{<span>{playerNumber === 0 ? \"⇨\" : \" \"} </span>}</td>\r\n                  <td><span>{playerPoints[0]}</span></td>\r\n                  <td>-</td>\r\n                  <td><span>{playerPoints[1]}</span></td>\r\n                  <td style={{ width: 50, color: \"yellow\" }}>{<span> {playerNumber === 1 ? \"⇦\" : \" \"}</span>}</td>\r\n                  <td className=\"player player2\">Player 2</td>\r\n                </tr>\r\n              </tbody>\r\n            </table>\r\n          </div>\r\n\r\n          {getSnookersRequiredTarget().isSnookersRequiredTargetPossible &&\r\n            <>\r\n              <div>\r\n                Snookers Required Target : {getSnookersRequiredTarget().targetValue}\r\n              </div>\r\n              <div>\r\n                {getSnookersRequiredTarget().redCount > 0 &&\r\n                  <div>\r\n                    <span className=\"ball red\">{getSnookersRequiredTarget().redCount}</span>\r\n                    <span className=\"ball black\">{getSnookersRequiredTarget().blackCount}</span>\r\n                  </div>\r\n                }\r\n                <div>\r\n                  {getSnookersRequiredTarget().isYellowRequired && <span className=\"ball yellow\"></span>}\r\n                  {getSnookersRequiredTarget().isGreenRequired && <span className=\"ball green\"></span>}\r\n                  {getSnookersRequiredTarget().isBrownRequired && <span className=\"ball brown\"></span>}\r\n                  {getSnookersRequiredTarget().isBlueRequired && <span className=\"ball blue\"></span>}\r\n                  {getSnookersRequiredTarget().isPinkRequired && <span className=\"ball pink\"></span>}\r\n                  {getSnookersRequiredTarget().isBlackRequired && <span className=\"ball black\"></span>}\r\n                </div>\r\n              </div>\r\n            </>\r\n          }\r\n\r\n          {/* <div>\r\n            Snookers Required Target JSON:\r\n            <pre style={{ fontSize: 14 }}>{JSON.stringify(getSnookersRequiredTarget(), null, 2)}</pre>\r\n          </div> */}\r\n\r\n          {!isGameOver &&\r\n            <div style={{ marginTop: 15 }}>\r\n              {areSnookersRequiredForOtherPlayer() && <div style={{ backgroundColor: \"orange\", paddingTop: 10, paddingBottom: 10 }}>Player {(playerNumber + 1) % 2 === 0 ? 1 : 2} : Snookers Required!!!!</div>}\r\n              {areSnookersRequiredForCurrentPlayer() && <div><button className=\"negative\" onClickCapture={concede}>Player {(playerNumber) % 2 === 0 ? 1 : 2} Concedes</button></div>}\r\n            </div>\r\n          }\r\n          {!isGameOver && wasLastShotAFoul && <div><button className=\"negative\" onClickCapture={playAgain}>Player {getOtherPlayerNumber()} Play Again</button></div>}\r\n          {!isGameOver &&\r\n            <>\r\n              <div>\r\n                Points Remaining for Current Player: <span>{pointsRemaining}</span>\r\n              </div>\r\n              <div>\r\n                Points Remaining For Player {(playerNumber + 1) % 2 === 0 ? 1 : 2}: <span>{pointsRemainingForOtherPlayer}</span>\r\n              </div>\r\n            </>\r\n          }\r\n          {isGameOver && <div><button className=\"positive\" onClickCapture={newGame}>New Frame</button></div>}\r\n        </div>\r\n      </header>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import 'core-js';\nimport \"react-app-polyfill/ie11\";\nimport \"react-app-polyfill/stable\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}
[{"C:\\D\\SamplesReact\\snooker-score01\\src\\reportWebVitals.ts":"1","C:\\D\\SamplesReact\\snooker-score01\\src\\App.tsx":"2","C:\\D\\SamplesReact\\snooker-score01\\src\\index.tsx":"3"},{"size":425,"mtime":1609598581853,"results":"4","hashOfConfig":"5"},{"size":8371,"mtime":1609626540220,"results":"6","hashOfConfig":"5"},{"size":570,"mtime":1609628569187,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"ysp3y3",{"filePath":"10","messages":"11","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"12"},{"filePath":"13","messages":"14","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\D\\SamplesReact\\snooker-score01\\src\\reportWebVitals.ts",[],"C:\\D\\SamplesReact\\snooker-score01\\src\\App.tsx",["15"],"import React, { useState } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\n// interface IPlayerPointsState {\n//   0: number;\n//   1: number;\n// }\n\nconst App = () => {\n  const [redsRemaining, setRedsRemaining] = useState(15);\n\n  const [pointsRemaining, setPointsRemaining] = useState(147);\n  const [pointsRemainingForOtherPlayer, setPointsRemainingForOtherPlayer] = useState(147);\n\n  const [playerPoints, setPlayerPoints] = useState([0, 0]);\n  const [playerNumber, setPlayerNumber] = useState(0);\n\n  const [isFinalRedColourGone, setIsFinalRedColourGone] = useState(false);\n\n  const [isRedOn, setIsRedOn] = useState(true);\n  const [isYellowOn, setIsYellowOn] = useState(true);\n  const [isGreenOn, setIsGreenOn] = useState(true);\n  const [isBrownOn, setIsBrownOn] = useState(true);\n  const [isBlueOn, setIsBlueOn] = useState(true);\n  const [isPinkOn, setIsPinkOn] = useState(true);\n  const [isBlackOn, setIsBlackOn] = useState(true);\n\n  const [isGameOver, setIsGameOver] = useState(false);\n\n  const potNothing = () => {\n    setPlayerNumber((playerNumber + 1) % 2);\n    setIsRedOn(redsRemaining > 0);\n    setPointsRemaining((redsRemaining * 8) + 27);\n\n    if (redsRemaining === 0) {\n      setIsFinalRedColourGone(true);\n      setIsYellowOn(true);\n      setIsGreenOn(false);\n      setIsBrownOn(false);\n      setIsBlueOn(false);\n      setIsPinkOn(false);\n      setIsBlackOn(false);\n    }\n  }\n\n  const potRed = () => {\n    potBall(1);\n    setRedsRemaining(redsRemaining - 1);\n\n    setPointsRemainingForOtherPlayer(pointsRemainingForOtherPlayer - 8);\n  }\n\n  const potYellow = () => {\n    potBall(2);\n  }\n\n  const potGreen = () => {\n    potBall(3);\n  }\n\n  const potBrown = () => {\n    potBall(4);\n  }\n\n  const potBlue = () => {\n    potBall(5);\n  }\n\n  const potPink = () => {\n    potBall(6);\n  }\n\n  const potBlack = () => {\n    potBall(7);\n\n    if (isFinalRedColourGone) {\n      setIsGameOver(true);\n    }\n  }\n\n  // public get areSnookersRequired() {\n  //   return pointsRemainingForOtherPlayer < playerPoints[playerNumber];\n  // }\n\n  const areSnookersRequired = () => {\n    return (playerPoints[1 - playerNumber] + pointsRemainingForOtherPlayer) < playerPoints[playerNumber];\n  }\n\n  const foul = (value: number) => {\n    if (playerNumber === 0) {\n      setPlayerPoints([playerPoints[0], playerPoints[1] + value]);\n    } else {\n      setPlayerPoints([playerPoints[0] + value, playerPoints[1]]);\n    }\n\n    setPlayerNumber((playerNumber + 1) % 2);\n    setIsRedOn(redsRemaining > 0);\n  }\n\n  const potBall = (value: number) => {\n    setPointsRemaining(pointsRemaining - value);\n\n    if (playerNumber === 0) {\n      setPlayerPoints([playerPoints[0] + value, playerPoints[1]]);\n    } else {\n      setPlayerPoints([playerPoints[0], playerPoints[1] + value]);\n    }\n\n    setIsRedOn(redsRemaining > 0 && value > 1);\n\n    if (redsRemaining === 0 && value > 1) {\n      setIsFinalRedColourGone(true);\n      setIsYellowOn(true);\n      setIsGreenOn(false);\n      setIsBrownOn(false);\n      setIsBlueOn(false);\n      setIsPinkOn(false);\n      setIsBlackOn(false);\n    }\n\n    if (isFinalRedColourGone) {\n      setPointsRemainingForOtherPlayer(pointsRemainingForOtherPlayer - value);\n\n      switch (value) {\n        case 2:\n          setIsYellowOn(false);\n          setIsGreenOn(true);\n          setIsBrownOn(false);\n          setIsBlueOn(false);\n          setIsPinkOn(false);\n          setIsBlackOn(false);\n          break;\n        case 3:\n          setIsYellowOn(false);\n          setIsGreenOn(false);\n          setIsBrownOn(true);\n          setIsBlueOn(false);\n          setIsPinkOn(false);\n          setIsBlackOn(false);\n          break;\n        case 4:\n          setIsYellowOn(false);\n          setIsGreenOn(false);\n          setIsBrownOn(false);\n          setIsBlueOn(true);\n          setIsPinkOn(false);\n          setIsBlackOn(false);\n          break;\n        case 5:\n          setIsYellowOn(false);\n          setIsGreenOn(false);\n          setIsBrownOn(false);\n          setIsBlueOn(false);\n          setIsPinkOn(true);\n          setIsBlackOn(false);\n          break;\n        case 6:\n          setIsYellowOn(false);\n          setIsGreenOn(false);\n          setIsBrownOn(false);\n          setIsBlueOn(false);\n          setIsPinkOn(false);\n          setIsBlackOn(true);\n          break;\n        case 7:\n          setIsYellowOn(false);\n          setIsGreenOn(false);\n          setIsBrownOn(false);\n          setIsBlueOn(false);\n          setIsPinkOn(false);\n          setIsBlackOn(false);\n          break;\n        default:\n          break;\n      }\n    }\n  }\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        {/* <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.tsx</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a> */}\n        {!isGameOver &&\n          <div>\n            Remaining Reds: {redsRemaining}\n            <div>\n              Pot\n          </div>\n            <div>\n              {/* <span className=\"ball\">Pot</span> */}\n              {isRedOn &&\n                <div>\n                  <span className=\"ball red\" onClick={() => potRed()}>{redsRemaining}</span>\n                  <span className=\"ball red\" onClick={() => potRed()}>{redsRemaining}</span>\n                  <span className=\"ball red\" onClick={() => potRed()}>{redsRemaining}</span>\n                  <span className=\"ball red\" onClick={() => potRed()}>{redsRemaining}</span>\n                  <span className=\"ball red\" onClick={() => potRed()}>{redsRemaining}</span>\n                  <span className=\"ball red\" onClick={() => potRed()}>{redsRemaining}</span>\n                </div>\n              }\n              {!isRedOn &&\n                <div>\n                  {isYellowOn && <span className=\"ball yellow\" onClick={() => potYellow()}></span>}\n                  {isGreenOn && <span className=\"ball green\" onClick={() => potGreen()}></span>}\n                  {isBrownOn && <span className=\"ball brown\" onClick={() => potBrown()}></span>}\n                  {isBlueOn && <span className=\"ball blue\" onClick={() => potBlue()}></span>}\n                  {isPinkOn && <span className=\"ball pink\" onClick={() => potPink()}></span>}\n                  {isBlackOn && <span className=\"ball black\" onClick={() => potBlack()}></span>}\n                </div>\n              }\n            </div>\n            <div>\n              No Pot\n          </div>\n            <div>\n              <span className=\"ball white\" onClick={() => potNothing()}></span>\n            </div>\n            <div>\n              Foul\n          </div>\n            <div>\n              <span className=\"ball red\" onClick={() => foul(4)}>X</span>\n              <span className=\"ball yellow\" onClick={() => foul(4)}>X</span>\n              <span className=\"ball green\" onClick={() => foul(4)}>X</span>\n              <span className=\"ball brown\" onClick={() => foul(4)}>X</span>\n              <span className=\"ball blue\" onClick={() => foul(5)}>X</span>\n              <span className=\"ball pink\" onClick={() => foul(6)}>X</span>\n              <span className=\"ball black\" onClick={() => foul(7)}>X</span>\n            </div>\n          </div>\n        }\n\n        {isGameOver && <div>Game Over!</div>}\n        <div>\n          <div>\n            Current Player: <span>{playerNumber + 1}</span>\n\n            {/* <div>\n              PointsRemainingForOtherPlayer: {pointsRemainingForOtherPlayer}\n            </div>\n            <div>\n              PlayerPoints[{playerNumber}]: {playerPoints[playerNumber]}\n            </div> */}\n            {areSnookersRequired() && <div style={{ backgroundColor: \"orange\" }}>Player {(playerNumber + 1) % 2 === 0 ? 1 : 2} : Snookers Required!!!!</div>}\n          </div>\n          <div>\n            Points Remaining: <span>{pointsRemaining}</span>\n          </div>\n          <div>\n            Points Remaining For Player {(playerNumber + 1) % 2 === 0 ? 1 : 2}: <span>{pointsRemainingForOtherPlayer}</span>\n          </div>\n          <div>\n            Player 1: <span>{playerPoints[0]}</span>\n          </div>\n          <div>\n            Player 2: <span>{playerPoints[1]}</span>\n          </div>\n        </div>\n\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","C:\\D\\SamplesReact\\snooker-score01\\src\\index.tsx",[],{"ruleId":"16","severity":1,"message":"17","line":2,"column":8,"nodeType":"18","messageId":"19","endLine":2,"endColumn":12},"@typescript-eslint/no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar"]